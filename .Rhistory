)
summary_df %>% filter(term == "(Intercept)")
summary_df %>% filter(term == "x1")
summary_df %>% filter(term == "x2")
summary_df %>% filter(term == "x3")
summary_df %>% filter(term == "x4")
library(dplyr)
library(tidyr)
library(ipd)
setwd('~/Documents/GitHub/PB-Inference/Scripts')
source('data_generation.R')
source('method_functions.R')
# Simulation Parameters
sce <- c("3a")
n_train <- 100000
n_tot <- 5500
n_test <- 500
n_val <- n_tot - n_test
# Model formula
formula <- y - pred ~ (x1 + x3 + x4)
family <- "binomial"
# Set Seed
set.seed(2025)
# Number of simulation replicates.
n_sim <- 500
analysis_type <- "alt"
sim_result <- c()
# Prediction model.
if (analysis_type == "another_look") {
pred_model <- data_gen_train(n_train, sce) # family = family)
} else if (analysis_type == "pspa") {
train_data <- pasa_data_gen(1000, imp_quality = 0.8, family = family)
train_data <- train_data[, -c(51)]
if(family == "binomial"){
train_data$y <- as.factor(train_data$y)
}
model <- randomForest::randomForest(y ~ ., data = train_data)
}
for(i in 1 : n_sim){
if (analysis_type == "another_look") {
# Generate working dataset
sim_dat_tv <- data_gen_testval(n_tot, pred_model, sce, family = family)
sim_dat_tv$set <- rep(c("testing", "validation"), c(n_test, n_val))
#cor(sim_dat_tv[,"y"], sim_dat_tv[,"pred"])
} else if (analysis_type == "pspa")  {
labeled_data <- pasa_data_gen(n_test, imp_quality = 0.8, family = family) # fixed
labeled_data$pred <- predict(model, newdata = labeled_data)
labeled_data$set <- "testing"
unlabeled_data <- pasa_data_gen(n_val, imp_quality = 0.8, family = family)
unlabeled_data$pred <- predict(model, newdata = unlabeled_data)
unlabeled_data$set <- "validation"
sim_dat_tv <- rbind(labeled_data, unlabeled_data)
#cor(sim_dat_tv[,"y"], sim_dat_tv[,"pred"])
if(family == "binomial"){
sim_dat_tv$y <- as.numeric(sim_dat_tv$y)
sim_dat_tv$pred <- as.numeric(sim_dat_tv$pred) - 1
}
} else {
sim_dat_tv <- alt_data_gen (n_tot, p = 4,sigma_z = 0.2,
sigma_tau = 0.3,
lambda = 0.02,
sigma = 0.5,
sigma_pred = 0.4, # set to 0.2 and 0.4
lambda_pred = 0,
family = family)
sim_dat_tv$set <- rep(c("testing", "validation"), c(n_test, n_val))
# cor(sim_dat_tv[,"y"], sim_dat_tv[,"pred"])^2
}
# Implementation
method_dfs <- rbind(
true_beta(sim_dat_tv, formula, family),
naive_beta(sim_dat_tv, formula, family),
observed_beta(sim_dat_tv, formula, family),
chen_chen(sim_dat_tv, formula, family),
ew_minvar(sim_dat_tv, formula, family),
ppi_full(sim_dat_tv, formula, family),
ppi(sim_dat_tv, formula, family),
ppi_plusplus(sim_dat_tv, formula, family),
pspa(sim_dat_tv, formula, family)
)
sim_result <- rbind(sim_result, method_dfs)
}
observed_var <- sim_result %>%
filter(Method == "observed") %>%
group_by(term) %>%
summarise(var_observed = var(Estimate)) %>%
pull(var_observed)
true_val <- sim_result %>%
filter(Method == "observed") %>%
group_by(term) %>%
summarise(true_val = mean(Estimate)) %>%
pull(true_val)
summary_df <- sim_result %>%
group_by(Method, term) %>%
summarise(
mean_estimate = mean(Estimate),
sd_estimate   = sd(Estimate),
mean_std_error = mean(Std.Error),
.groups = "drop"
)  %>%
mutate(
RE = (mean_estimate - true_val)^2 + observed_var / (sd_estimate)^2
)
summary_df %>% filter(term == "(Intercept)")
summary_df %>% filter(term == "x1")
summary_df %>% filter(term == "x2")
summary_df %>% filter(term == "x3")
summary_df %>% filter(term == "x4")
library(dplyr)
library(tidyr)
library(ipd)
setwd('~/Documents/GitHub/PB-Inference/Scripts')
source('data_generation.R')
source('method_functions.R')
# Simulation Parameters
sce <- c("3a")
n_train <- 100000
n_tot <- 5500
n_test <- 500
n_val <- n_tot - n_test
# Model formula
formula <- y - pred ~ (x1 + x3 + x4)
family <- "binomial"
# Set Seed
set.seed(2025)
# Number of simulation replicates.
n_sim <- 500
analysis_type <- "alt"
sim_result <- c()
# Prediction model.
if (analysis_type == "another_look") {
pred_model <- data_gen_train(n_train, sce) # family = family)
} else if (analysis_type == "pspa") {
train_data <- pasa_data_gen(1000, imp_quality = 0.8, family = family)
train_data <- train_data[, -c(51)]
if(family == "binomial"){
train_data$y <- as.factor(train_data$y)
}
model <- randomForest::randomForest(y ~ ., data = train_data)
}
for(i in 1 : n_sim){
if (analysis_type == "another_look") {
# Generate working dataset
sim_dat_tv <- data_gen_testval(n_tot, pred_model, sce, family = family)
sim_dat_tv$set <- rep(c("testing", "validation"), c(n_test, n_val))
#cor(sim_dat_tv[,"y"], sim_dat_tv[,"pred"])
} else if (analysis_type == "pspa")  {
labeled_data <- pasa_data_gen(n_test, imp_quality = 0.8, family = family) # fixed
labeled_data$pred <- predict(model, newdata = labeled_data)
labeled_data$set <- "testing"
unlabeled_data <- pasa_data_gen(n_val, imp_quality = 0.8, family = family)
unlabeled_data$pred <- predict(model, newdata = unlabeled_data)
unlabeled_data$set <- "validation"
sim_dat_tv <- rbind(labeled_data, unlabeled_data)
#cor(sim_dat_tv[,"y"], sim_dat_tv[,"pred"])
if(family == "binomial"){
sim_dat_tv$y <- as.numeric(sim_dat_tv$y)
sim_dat_tv$pred <- as.numeric(sim_dat_tv$pred) - 1
}
} else {
sim_dat_tv <- alt_data_gen (n_tot, p = 4,sigma_z = 0.2,
sigma_tau = 0.3,
lambda = 0.02,
sigma = 0.5,
sigma_pred = 0.4, # set to 0.2 and 0.4
lambda_pred = 0,
family = family)
sim_dat_tv$set <- rep(c("testing", "validation"), c(n_test, n_val))
# cor(sim_dat_tv[,"y"], sim_dat_tv[,"pred"])^2
}
# Implementation
method_dfs <- rbind(
true_beta(sim_dat_tv, formula, family),
naive_beta(sim_dat_tv, formula, family),
observed_beta(sim_dat_tv, formula, family),
chen_chen(sim_dat_tv, formula, family),
ew_minvar(sim_dat_tv, formula, family),
ppi_full(sim_dat_tv, formula, family),
ppi(sim_dat_tv, formula, family),
ppi_plusplus(sim_dat_tv, formula, family),
pspa(sim_dat_tv, formula, family)
)
sim_result <- rbind(sim_result, method_dfs)
}
observed_var <- sim_result %>%
filter(Method == "observed") %>%
group_by(term) %>%
summarise(var_observed = var(Estimate)) %>%
pull(var_observed)
true_val <- sim_result %>%
filter(Method == "observed") %>%
group_by(term) %>%
summarise(true_val = mean(Estimate)) %>%
pull(true_val)
summary_df <- sim_result %>%
group_by(Method, term) %>%
summarise(
mean_estimate = mean(Estimate),
sd_estimate   = sd(Estimate),
mean_std_error = mean(Std.Error),
.groups = "drop"
)  %>%
mutate(
RE = (mean_estimate - true_val)^2 + observed_var / (sd_estimate)^2
)
summary_df %>% filter(term == "(Intercept)")
summary_df %>% filter(term == "x1")
summary_df %>% filter(term == "x2")
summary_df %>% filter(term == "x3")
summary_df %>% filter(term == "x4")
setwd('~/Documents/GitHub/AUMCF-simulation')
library(optparse)
library(MCC)
library(parallel)
library(dplyr)
# Functions for comparison methods.
source("comparison_methods.R")
# Functions for data generation.
source("data_generation.R")
# Number of simulation replicates.
my_reps <- 1
# Simulation parameters.
params <- list(
n = 200, # Sample size.
censor = 0.2, # Censoring rate.
time = 4, # Observation window.
frailtyVar = 0, # Frailty variance.
# Baseline rate of terminal events.
BaseDeath0 = 0.2,
BaseDeath1 = 0.2,
# Baseline rate of recurrent events.
BaseEvent0 = 1.0,
BaseEvent1 = 1.0,
)
# Packages.
library(optparse)
library(MCC)
library(parallel)
library(dplyr)
# Functions for comparison methods.
source("comparison_methods.R")
# Functions for data generation.
source("data_generation.R")
# Simulation parameters.
params <- list(
n = 200, # Sample size.
censor = 0.2, # Censoring rate.
time = 4, # Observation window.
frailtyVar = 0, # Frailty variance.
# Baseline rate of terminal events.
BaseDeath0 = 0.2,
BaseDeath1 = 0.2,
# Baseline rate of recurrent events.
BaseEvent0 = 1.0,
BaseEvent1 = 1.0,
)
# Packages.
library(optparse)
library(MCC)
library(parallel)
library(dplyr)
# Functions for comparison methods.
source("comparison_methods.R")
# Functions for data generation.
source("data_generation.R")
# Simulation parameters.
params <- list(
n = 200, # Sample size.
censor = 0.2, # Censoring rate.
time = 4, # Observation window.
frailtyVar = 0, # Frailty variance.
# Baseline rate of terminal events.
BaseDeath0 = 0.2,
BaseDeath1 = 0.2,
# Baseline rate of recurrent events.
BaseEvent0 = 1.0,
BaseEvent1 = 1.0
)
# Packages.
library(optparse)
library(MCC)
library(parallel)
library(dplyr)
# Functions for comparison methods.
source("comparison_methods.R")
# Functions for data generation.
source("data_generation.R")
# Simulation parameters.
params <- list(
n = 200, # Sample size.
censor = 0.2, # Censoring rate.
time = 4, # Observation window.
frailtyVar = 0, # Frailty variance.
# Baseline rate of terminal events.
BaseDeath0 = 0.2,
BaseDeath1 = 0.2,
# Baseline rate of recurrent events.
BaseEvent0 = 1.0,
BaseEvent1 = 1.0,
# Indicator for whether to do an adjusted analysis.
adjusted = 0
)
# Generate data.
data <- SimData(n = n,
censoring_rate = censoring_rate,
base_death_rate = params$BaseDeath0,
base_event_rate_0 = params$BaseEvent0,
base_event_rate_1 = params$BaseEvent1,
frailty_variance = params$frailtyVar,
tau = params$time,
adjust = params$adjusted)
data <- SimData(n = params$n
censoring_rate = params$censor,
data <- SimData(n = params$n,
censoring_rate = params$censor,
base_death_rate = params$BaseDeath0,
base_event_rate_0 = params$BaseEvent0,
base_event_rate_1 = params$BaseEvent1,
frailty_variance = params$frailtyVar,
tau = params$time,
adjust = params$adjusted)
data <- SimulateData(params)
library(optparse)
library(MCC)
library(parallel)
library(dplyr)
# Functions for comparison methods.
source("comparison_methods.R")
# Functions for data generation.
source("data_generation.R")
# Simulation parameters.
params <- list(
n = 200, # Sample size.
censor = 0.2, # Censoring rate.
time = 4, # Observation window.
frailtyVar = 0, # Frailty variance.
# Baseline rate of terminal events.
BaseDeath0 = 0.2,
BaseDeath1 = 0.2,
# Baseline rate of recurrent events.
BaseEvent0 = 1.0,
BaseEvent1 = 1.0,
# Indicator for whether to do an adjusted analysis.
adjusted = 0
)
# Generate data.
data <- SimData(n = params$n,
censoring_rate = params$censor,
base_death_rate = params$BaseDeath0,
base_event_rate_0 = params$BaseEvent0,
base_event_rate_1 = params$BaseEvent1,
frailty_variance = params$frailtyVar,
tau = params$time,
adjust = params$adjusted)
# Run AUMCF analysis + comparison methods.
results <- RunAllMethods(data, params$time, params$adjusted)
results
# Packages.
library(optparse)
library(MCC)
library(parallel)
library(dplyr)
# Functions for comparison methods.
source("comparison_methods.R")
# Functions for data generation.
source("data_generation.R")
# Simulation parameters.
params <- list(
n = 200, # Sample size.
censor = 0.2, # Censoring rate.
time = 4, # Observation window.
frailtyVar = 0, # Frailty variance.
# Baseline rate of terminal events.
BaseDeath0 = 0.2,
BaseDeath1 = 0.2,
# Baseline rate of recurrent events.
BaseEvent0 = 1.0,
BaseEvent1 = 1.0,
# Indicator for whether to do an adjusted analysis.
adjusted = 0
)
# Generate data.
set.seed(92047)
data <- SimData(n = params$n,
censoring_rate = params$censor,
base_death_rate = params$BaseDeath0,
base_event_rate_0 = params$BaseEvent0,
base_event_rate_1 = params$BaseEvent1,
frailty_variance = params$frailtyVar,
tau = params$time,
adjust = params$adjusted)
# Run AUMCF analysis + comparison methods.
results <- RunAllMethods(data, params$time, params$adjusted)
results
setwd('~/Documents/GitHub/AUMCF-Replication')
# Packages.
library(optparse)
library(MCC)
library(parallel)
library(dplyr)
# Functions for comparison methods.
source("comparison_methods.R")
# Functions for data generation.
source("data_generation.R")
# Simulation parameters.
params <- list(
n = 200, # Sample size.
censor = 0.2, # Censoring rate.
time = 4, # Observation window.
frailtyVar = 0, # Frailty variance.
# Baseline rate of terminal events.
BaseDeath0 = 0.2,
BaseDeath1 = 0.2,
# Baseline rate of recurrent events.
BaseEvent0 = 1.0,
BaseEvent1 = 1.0,
# Indicator for whether to do an adjusted analysis.
adjusted = 0
)
# Generate data.
set.seed(92047)
data <- SimData(n = params$n,
censoring_rate = params$censor,
base_death_rate = params$BaseDeath0,
base_event_rate_0 = params$BaseEvent0,
base_event_rate_1 = params$BaseEvent1,
frailty_variance = params$frailtyVar,
tau = params$time,
adjust = params$adjusted)
# Run AUMCF analysis + comparison methods.
results <- RunAllMethods(data, params$time, params$adjusted)
results
# Packages.
library(optparse)
library(MCC)
library(parallel)
library(dplyr)
# Functions for comparison methods.
source("comparison_methods.R")
# Functions for data generation.
source("data_generation.R")
# Simulation parameters.
params <- list(
n = 200, # Sample size.
censor = 0.2, # Censoring rate.
time = 4, # Observation window.
frailtyVar = 0, # Frailty variance.
# Baseline rate of terminal events in both treatment arms.
BaseDeath0 = 0.2,
# Baseline rate of recurrent events in each treatment arm.
BaseEvent0 = 1.0,
BaseEvent1 = 1.0,
# Indicator for whether to do an adjusted analysis.
adjusted = 0
)
# Generate data.
set.seed(92047)
data <- SimData(n = params$n,
censoring_rate = params$censor,
base_death_rate = params$BaseDeath0,
base_event_rate_0 = params$BaseEvent0,
base_event_rate_1 = params$BaseEvent1,
frailty_variance = params$frailtyVar,
tau = params$time,
adjust = params$adjusted)
# Run AUMCF analysis + comparison methods.
results <- RunAllMethods(data, params$time, params$adjusted)
results
View(results)
# Packages.
library(optparse)
library(MCC)
library(parallel)
library(dplyr)
library(survival)
library(reReg)
library(MASS)
library(frailtypack)
library(WR)
# Functions for comparison methods.
source("comparison_methods.R")
# Functions for data generation.
source("data_generation.R")
# Simulation parameters.
params <- list(
n = 200, # Sample size.
censor = 0.2, # Censoring rate.
time = 4, # Observation window.
frailtyVar = 0, # Frailty variance.
# Baseline rate of terminal events in both treatment arms.
BaseDeath0 = 0.2,
# Baseline rate of recurrent events in each treatment arm.
BaseEvent0 = 1.0,
BaseEvent1 = 1.0,
# Indicator for whether to do an adjusted analysis.
adjusted = 0
)
# Generate data.
set.seed(92047)
data <- SimData(n = params$n,
censoring_rate = params$censor,
base_death_rate = params$BaseDeath0,
base_event_rate_0 = params$BaseEvent0,
base_event_rate_1 = params$BaseEvent1,
frailty_variance = params$frailtyVar,
tau = params$time,
adjust = params$adjusted)
# Run AUMCF analysis + comparison methods.
results <- RunAllMethods(data, params$time, params$adjusted)
results
?frailty
?frailtyPenal
